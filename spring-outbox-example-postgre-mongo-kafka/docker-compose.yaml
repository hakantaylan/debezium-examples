version: "3.8"

services:
  # Install postgres and setup the user service database
  postgres:
    build: users-service/postgres
    restart: always
#    volumes:
#      - ./init.sql/create_schema.sql:/docker-entrypoint-initdb.d/create_schema.sql
#      - ./init.sql/seed_data.sql:/docker-entrypoint-initdb.d/seed_data.sql
    ports:
      - '5432:5432'
    environment:
      - POSTGRES_DB=user_DB
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    healthcheck:
      test: "pg_isready -U postgres -d user_DB"
      interval: 2s
      timeout: 20s
      retries: 10

  # Install zookeeper.
  zookeeper:
    container_name: zookeeper
    image: zookeeper
    ports:
      - '2181:2181'

  # Install kafka and create needed topics.
  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka
    hostname: kafka
    ports:
      - '9092:9092'
      - '29092:29092'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_HOST://kafka:29092
      LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: [ "CMD", "nc", "-vz", "localhost", "9092" ]
      interval: 5s
      timeout: 30s
      retries: 10
    depends_on:
      postgres:
        condition: service_healthy
      zookeeper:
        condition: service_started
#  kafka:
#    image: confluentinc/cp-kafka:latest
#    container_name: kafka
#    hostname: kafka
#    ports:
#      - "9092:9092"
#      - "9101:9101"
#    environment:
#      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9092'
#      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#      KAFKA_BROKER_ID: 1
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
#      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
#      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
#      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
#      KAFKA_JMX_PORT: 9101
#      KAFKA_JMX_HOSTNAME: localhost
#      KAFKA_PROCESS_ROLES: 'broker,controller'
#      KAFKA_NODE_ID: 1
#      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:29093'
#      KAFKA_LISTENERS: 'PLAINTEXT://kafka:29092,CONTROLLER://kafka:29093,PLAINTEXT_HOST://0.0.0.0:9092'
#      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
#      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
#      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
#    volumes:
#      - ./update_run.sh:/tmp/update_run.sh
#    command: "bash -c 'if [ ! -f /tmp/update_run.sh ]; then echo \"ERROR: Did you forget the update_run.sh file that came with this docker-compose.yml file?\" && exit 1 ; else /tmp/update_run.sh && /etc/confluent/docker/run ; fi'"
#    healthcheck:
#      test: [ "CMD", "nc", "-vz", "localhost", "9092" ]
#      interval: 5s
#      timeout: 30s
#      retries: 10
#    depends_on:
#      postgres:
#        condition: service_healthy

  debezium-connect:
    container_name: custom-debezium-connect
    image: outbox-transformer
    hostname: debezium-connect
    ports:
      - '8083:8083'
    environment:
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: debezium_connect_config
      OFFSET_STORAGE_TOPIC: debezium_connect_offsets
      STATUS_STORAGE_TOPIC: debezium_connect_status
      BOOTSTRAP_SERVERS: kafka:29092
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy

  mongodb:
    image: 'bitnami/mongodb:4.4.8'
    container_name: mongodb
    ports:
      - "27017:27017"
    environment:
      MONGODB_ADVERTISED_HOSTNAME: mongodb
      MONGODB_REPLICA_SET_MODE: primary
      MONGODB_ROOT_PASSWORD: admin
      MONGO_INITDB_ROOT_PASSWORD: admin
      MONGODB_REPLICA_SET_KEY: replicasetkey123
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo localhost:27017/db --quiet
      interval: 2s
      timeout: 20s
      retries: 10

  mongo-express:
    container_name: mongo-express
    image: mongo-express
    restart: always
    ports:
      - "8095:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: admin
      ME_CONFIG_MONGODB_SERVER: mongodb
    depends_on:
      mongodb:
        condition: service_healthy
